// <auto-generated />
using System;
using DataBase.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataBase.EF.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230818094436_NotificationTable")]
    partial class NotificationTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BDataBase.Core.Models.Accounts.UserAccounts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("gender")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("DataBase.Core.Models.Accounts.Friend", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ApprovedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FirstUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SecondUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FirstUserId");

                    b.HasIndex("SecondUserId");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("DataBase.Core.Models.Accounts.FriendRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RequestorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("RequestorId");

                    b.ToTable("FriendRequests");
                });

            modelBuilder.Entity("DataBase.Core.Models.Authentication.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RegistrationIP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DataBase.Core.Models.Authentication.TokenCode", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Token");

                    b.ToTable("TokenCodes");
                });

            modelBuilder.Entity("DataBase.Core.Models.CommentModels.PostComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserAccountsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("comment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserAccountsId");

                    b.ToTable("PostComments");
                });

            modelBuilder.Entity("DataBase.Core.Models.CommentModels.QuestionComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QuestionPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserAccountsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("comment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionPostId");

                    b.HasIndex("UserAccountsId");

                    b.ToTable("QuestionComments");
                });

            modelBuilder.Entity("DataBase.Core.Models.Notifications.Notifications", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActionedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NotificatinType")
                        .HasColumnType("int");

                    b.Property<Guid>("NotifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActionedUserId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("DataBase.Core.Models.PhotoModels.CoverPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserAccountsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountsId")
                        .IsUnique();

                    b.ToTable("CoverPhotos");
                });

            modelBuilder.Entity("DataBase.Core.Models.PhotoModels.PostCommentPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PostCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostCommentId")
                        .IsUnique();

                    b.ToTable("PostCommentPhotos");
                });

            modelBuilder.Entity("DataBase.Core.Models.PhotoModels.PostPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostPhotos");
                });

            modelBuilder.Entity("DataBase.Core.Models.PhotoModels.ProfilePhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserAccountsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountsId")
                        .IsUnique();

                    b.ToTable("ProfilePhotos");
                });

            modelBuilder.Entity("DataBase.Core.Models.PhotoModels.QuestionCommentPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionCommentId")
                        .IsUnique();

                    b.ToTable("QuestionCommentPhotos");
                });

            modelBuilder.Entity("DataBase.Core.Models.PhotoModels.QuestionPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionPhotos");
                });

            modelBuilder.Entity("DataBase.Core.Models.Posts.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserAccountsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountsId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("DataBase.Core.Models.Posts.QuestionPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserAccountsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountsId");

                    b.ToTable("QuestionPosts");
                });

            modelBuilder.Entity("DataBase.Core.Models.Reacts.PostCommentReact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserAccountsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("react")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostCommentId");

                    b.HasIndex("UserAccountsId");

                    b.ToTable("PostCommentReacts");
                });

            modelBuilder.Entity("DataBase.Core.Models.Reacts.PostReact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserAccountsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("react")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserAccountsId");

                    b.ToTable("PostReacts");
                });

            modelBuilder.Entity("DataBase.Core.Models.Reacts.QuestionCommentReact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserAccountsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("react")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionCommentId");

                    b.HasIndex("UserAccountsId");

                    b.ToTable("QuestionCommentReacts");
                });

            modelBuilder.Entity("DataBase.Core.Models.Reacts.QuestionReact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserAccountsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("react")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionPostId");

                    b.HasIndex("UserAccountsId");

                    b.ToTable("QuestionReacts");
                });

            modelBuilder.Entity("DataBase.Core.Models.VedioModels.PostCommentVedio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VedioPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PostCommentId")
                        .IsUnique();

                    b.ToTable("PostCommentVedios");
                });

            modelBuilder.Entity("DataBase.Core.Models.VedioModels.PostVedio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VedioPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostVedios");
                });

            modelBuilder.Entity("DataBase.Core.Models.VedioModels.QuestionCommentVedio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VedioPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionCommentId")
                        .IsUnique();

                    b.ToTable("QuestionCommentVedios");
                });

            modelBuilder.Entity("DataBase.Core.Models.VedioModels.QuestionVedio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VedioPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionPostId");

                    b.ToTable("QuestionVedios");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataBase.Core.Models.Accounts.Friend", b =>
                {
                    b.HasOne("BDataBase.Core.Models.Accounts.UserAccounts", "FirstUser")
                        .WithMany("Friends")
                        .HasForeignKey("FirstUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BDataBase.Core.Models.Accounts.UserAccounts", "SecondUser")
                        .WithMany()
                        .HasForeignKey("SecondUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FirstUser");

                    b.Navigation("SecondUser");
                });

            modelBuilder.Entity("DataBase.Core.Models.Accounts.FriendRequest", b =>
                {
                    b.HasOne("BDataBase.Core.Models.Accounts.UserAccounts", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BDataBase.Core.Models.Accounts.UserAccounts", "Requestor")
                        .WithMany("FriendRequests")
                        .HasForeignKey("RequestorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Requestor");
                });

            modelBuilder.Entity("DataBase.Core.Models.Authentication.ApplicationUser", b =>
                {
                    b.OwnsMany("DataBase.Core.Models.Authentication.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("CreatedOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("ExpiresOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("RevokedOn")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApplicationUserId", "Id");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("DataBase.Core.Models.CommentModels.PostComment", b =>
                {
                    b.HasOne("DataBase.Core.Models.Posts.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDataBase.Core.Models.Accounts.UserAccounts", "UserAccounts")
                        .WithMany()
                        .HasForeignKey("UserAccountsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("UserAccounts");
                });

            modelBuilder.Entity("DataBase.Core.Models.CommentModels.QuestionComment", b =>
                {
                    b.HasOne("DataBase.Core.Models.Posts.QuestionPost", "QuestionPost")
                        .WithMany("Comments")
                        .HasForeignKey("QuestionPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDataBase.Core.Models.Accounts.UserAccounts", "UserAccounts")
                        .WithMany()
                        .HasForeignKey("UserAccountsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QuestionPost");

                    b.Navigation("UserAccounts");
                });

            modelBuilder.Entity("DataBase.Core.Models.Notifications.Notifications", b =>
                {
                    b.HasOne("BDataBase.Core.Models.Accounts.UserAccounts", "ActionedUser")
                        .WithMany("Notifications")
                        .HasForeignKey("ActionedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionedUser");
                });

            modelBuilder.Entity("DataBase.Core.Models.PhotoModels.CoverPhoto", b =>
                {
                    b.HasOne("BDataBase.Core.Models.Accounts.UserAccounts", null)
                        .WithOne("CoverPhoto")
                        .HasForeignKey("DataBase.Core.Models.PhotoModels.CoverPhoto", "UserAccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataBase.Core.Models.PhotoModels.PostCommentPhoto", b =>
                {
                    b.HasOne("DataBase.Core.Models.CommentModels.PostComment", "PostComment")
                        .WithOne("PostCommentPhoto")
                        .HasForeignKey("DataBase.Core.Models.PhotoModels.PostCommentPhoto", "PostCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostComment");
                });

            modelBuilder.Entity("DataBase.Core.Models.PhotoModels.PostPhoto", b =>
                {
                    b.HasOne("DataBase.Core.Models.Posts.Post", "Post")
                        .WithMany("Photos")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("DataBase.Core.Models.PhotoModels.ProfilePhoto", b =>
                {
                    b.HasOne("BDataBase.Core.Models.Accounts.UserAccounts", null)
                        .WithOne("ProfilePhoto")
                        .HasForeignKey("DataBase.Core.Models.PhotoModels.ProfilePhoto", "UserAccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataBase.Core.Models.PhotoModels.QuestionCommentPhoto", b =>
                {
                    b.HasOne("DataBase.Core.Models.CommentModels.QuestionComment", "QuestionComment")
                        .WithOne("QuestionCommentPhoto")
                        .HasForeignKey("DataBase.Core.Models.PhotoModels.QuestionCommentPhoto", "QuestionCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionComment");
                });

            modelBuilder.Entity("DataBase.Core.Models.PhotoModels.QuestionPhoto", b =>
                {
                    b.HasOne("DataBase.Core.Models.Posts.QuestionPost", "QuestionPost")
                        .WithMany("Photos")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionPost");
                });

            modelBuilder.Entity("DataBase.Core.Models.Posts.Post", b =>
                {
                    b.HasOne("BDataBase.Core.Models.Accounts.UserAccounts", "UserAccounts")
                        .WithMany("Posts")
                        .HasForeignKey("UserAccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccounts");
                });

            modelBuilder.Entity("DataBase.Core.Models.Posts.QuestionPost", b =>
                {
                    b.HasOne("BDataBase.Core.Models.Accounts.UserAccounts", "UserAccounts")
                        .WithMany("QuestionPosts")
                        .HasForeignKey("UserAccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccounts");
                });

            modelBuilder.Entity("DataBase.Core.Models.Reacts.PostCommentReact", b =>
                {
                    b.HasOne("DataBase.Core.Models.CommentModels.PostComment", "PostComment")
                        .WithMany("PostCommentReacts")
                        .HasForeignKey("PostCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDataBase.Core.Models.Accounts.UserAccounts", "UserAccounts")
                        .WithMany()
                        .HasForeignKey("UserAccountsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PostComment");

                    b.Navigation("UserAccounts");
                });

            modelBuilder.Entity("DataBase.Core.Models.Reacts.PostReact", b =>
                {
                    b.HasOne("DataBase.Core.Models.Posts.Post", "Post")
                        .WithMany("Reacts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDataBase.Core.Models.Accounts.UserAccounts", "UserAccounts")
                        .WithMany()
                        .HasForeignKey("UserAccountsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("UserAccounts");
                });

            modelBuilder.Entity("DataBase.Core.Models.Reacts.QuestionCommentReact", b =>
                {
                    b.HasOne("DataBase.Core.Models.CommentModels.QuestionComment", "QuestionComment")
                        .WithMany("QuestionCommentReacts")
                        .HasForeignKey("QuestionCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDataBase.Core.Models.Accounts.UserAccounts", "UserAccounts")
                        .WithMany()
                        .HasForeignKey("UserAccountsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QuestionComment");

                    b.Navigation("UserAccounts");
                });

            modelBuilder.Entity("DataBase.Core.Models.Reacts.QuestionReact", b =>
                {
                    b.HasOne("DataBase.Core.Models.Posts.QuestionPost", "QuestionPost")
                        .WithMany("Reacts")
                        .HasForeignKey("QuestionPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDataBase.Core.Models.Accounts.UserAccounts", "UserAccounts")
                        .WithMany()
                        .HasForeignKey("UserAccountsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QuestionPost");

                    b.Navigation("UserAccounts");
                });

            modelBuilder.Entity("DataBase.Core.Models.VedioModels.PostCommentVedio", b =>
                {
                    b.HasOne("DataBase.Core.Models.CommentModels.PostComment", "PostComment")
                        .WithOne("PostCommentVedio")
                        .HasForeignKey("DataBase.Core.Models.VedioModels.PostCommentVedio", "PostCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostComment");
                });

            modelBuilder.Entity("DataBase.Core.Models.VedioModels.PostVedio", b =>
                {
                    b.HasOne("DataBase.Core.Models.Posts.Post", "Post")
                        .WithMany("Vedios")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("DataBase.Core.Models.VedioModels.QuestionCommentVedio", b =>
                {
                    b.HasOne("DataBase.Core.Models.CommentModels.QuestionComment", "QuestionComment")
                        .WithOne("QuestionCommentVedio")
                        .HasForeignKey("DataBase.Core.Models.VedioModels.QuestionCommentVedio", "QuestionCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionComment");
                });

            modelBuilder.Entity("DataBase.Core.Models.VedioModels.QuestionVedio", b =>
                {
                    b.HasOne("DataBase.Core.Models.Posts.QuestionPost", "QuestionPost")
                        .WithMany("Vedios")
                        .HasForeignKey("QuestionPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionPost");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataBase.Core.Models.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataBase.Core.Models.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Core.Models.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataBase.Core.Models.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BDataBase.Core.Models.Accounts.UserAccounts", b =>
                {
                    b.Navigation("CoverPhoto")
                        .IsRequired();

                    b.Navigation("FriendRequests");

                    b.Navigation("Friends");

                    b.Navigation("Notifications");

                    b.Navigation("Posts");

                    b.Navigation("ProfilePhoto")
                        .IsRequired();

                    b.Navigation("QuestionPosts");
                });

            modelBuilder.Entity("DataBase.Core.Models.CommentModels.PostComment", b =>
                {
                    b.Navigation("PostCommentPhoto")
                        .IsRequired();

                    b.Navigation("PostCommentReacts");

                    b.Navigation("PostCommentVedio")
                        .IsRequired();
                });

            modelBuilder.Entity("DataBase.Core.Models.CommentModels.QuestionComment", b =>
                {
                    b.Navigation("QuestionCommentPhoto")
                        .IsRequired();

                    b.Navigation("QuestionCommentReacts");

                    b.Navigation("QuestionCommentVedio")
                        .IsRequired();
                });

            modelBuilder.Entity("DataBase.Core.Models.Posts.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Photos");

                    b.Navigation("Reacts");

                    b.Navigation("Vedios");
                });

            modelBuilder.Entity("DataBase.Core.Models.Posts.QuestionPost", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Photos");

                    b.Navigation("Reacts");

                    b.Navigation("Vedios");
                });
#pragma warning restore 612, 618
        }
    }
}
